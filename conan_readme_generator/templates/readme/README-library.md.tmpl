#import os
[![Download](https://api.bintray.com/packages/${user}/public-conan/${name}%3A${user}/images/download.svg) ](https://bintray.com/${user}/public-conan/${name}%3A${user}/_latestVersion)
#if os.path.exists(".travis.yml")
[![Build Status Travis](https://travis-ci.org/${user}/conan-${name}.svg?branch=${channel}%2F${version})](https://travis-ci.org/${user}/conan-${name})
#end if
#if os.path.exists("azure-pipelines.yml")
[![Build Status Azure](https://dev.azure.com/bincrafters/packages/_apis/build/status/bincrafters.conan-qt?branchName=${channel}%2F${version})](https://dev.azure.com/${user}/packages/_build)
#end if
#if os.path.exists("appveyor.yml")
[![Build Status AppVeyor](https://ci.appveyor.com/api/projects/status/github/${user}/conan-${name}?branch=${channel}%2F${version}&svg=true)](https://ci.appveyor.com/project/${user}/conan-${name})
#end if

#if $homepage
[Conan](https://conan.io) package recipe for [*${name}*]($getVar('homepage', '')).
#else
[Conan](https://conan.io) package recipe for *${name}*.
#end if

$getVar('description', '')

The packages generated with this **conanfile** can be found on [Bintray](https://bintray.com/${user}/public-conan/${name}%3A${user}).

\#\# For Users: Use this package

\#\#\# Basic setup

    $ conan install ${name}/${version}@${user}/${channel}

\#\#\# Project setup

If you handle multiple dependencies in your project is better to add a *conanfile.txt*

    [requires]
    ${name}/${version}@${user}/${channel}

#if $generators
    [generators]
#for $gen in $generators
    ${gen}
#end for
#end if

Complete the installation of requirements for your project running:

    $ mkdir build && cd build && conan install ..

Note: It is recommended that you run conan install from a build directory and not the root of the project directory.  This is because conan generates *conanbuildinfo* files specific to a single build configuration which by default comes from an autodetected default profile located in ~/.conan/profiles/default .  If you pass different build configuration options to conan install, it will generate different *conanbuildinfo* files.  Thus, they should not be added to the root of the project, nor committed to git.

\#\# For Packagers: Publish this Package

The example below shows the commands used to publish to ${user} conan repository. To publish to your own conan respository (for example, after forking this git repository), you will need to change the commands below accordingly.

\#\# Build and package

The following command both runs all the steps of the conan file, and publishes the package to the local system cache.  This includes downloading dependencies from "build_requires" and "requires" , and then running the build() method.

    $ conan create ${user}/${channel}


#if $options
\#\#\# Available Options
| Option        | Default | Possible Values  |
| ------------- |:----------------- |:------------:|
#for $key, $value in $options.items()
#if $key not in $default_options
| ${key}      |                        |  ${value} |
#else
| ${key}      | $default_options[$key] |  ${value} |
#end if
#end for
#end if

\#\# Add Remote

    $ conan remote add ${user} "https://api.bintray.com/conan/${user}/public-conan"

\#\# Upload

    $ conan upload ${name}/${version}@${user}/${channel} --all -r ${user}


#if $recipe_license
\#\# Conan Recipe License

NOTE: The conan recipe license applies only to the files of this recipe, which can be used to build and package ${name}.
It does *not* in any way apply or is related to the actual software being packaged.

[$recipe_license['license']]($recipe_license['url'])
#end if
